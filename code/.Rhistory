cex = 0.7,
col="black",
xlab="X",
ylab="Y",
xlim=c(-12, 12),
ylim=c(-0.4, 1.2))
lines(X, y, lwd = 3, col = "red")
jpeg("Sinc Noisy Plot.jpg", width=800, height=600)
plot(X, t,
type="p",
pch =16,
cex = 0.7,
col="black",
xlab="X",
ylab="Y",
xlim=c(-12, 12),
ylim=c(-0.4, 1.2))
lines(X, y, lwd = 3, col = "red")
dev.off()
svmdata <- cbind(X, t)
model <- ksvm(x=X, y=t, kernel="rbfdot")
summary(model)
pred <- predict(model, X)
SVs <- cbind(X[model@SVindex], t[model@SVindex])
plot(X, pred,
type="l",
pch =16,
cex = 0.7,
col="black",
xlab="X",
ylab="Y",
xlim=c(-12, 12),
ylim=c(-0.4, 1.2))
lines(X, y, lwd=3, col= "red")
points(SVs[,1],
SVs[,2],
col = "turquoise",
pch=16,
cex=0.7)
jpeg("Sinc SVM Predictions.jpg", width=800, height=600)
plot(X, pred,
type="l",
pch =16,
cex = 0.7,
col="black",
xlab="X",
ylab="Y",
xlim=c(-12, 12),
ylim=c(-0.4, 1.2))
lines(X, y, lwd=3, col= "red")
points(SVs[,1],
SVs[,2],
col = "turquoise",
pch=16,
cex=0.7)
dev.off()
non_kernl <- bayesglm(t~ ., data=as.data.frame(svmdata))
pred_nk <- predict(non_kernl)
nk_sinc_err <- MSE(pred_nk, y)
print(paste0("NK regression report: mean square error ", nk_sinc_err))
plot(X, pred_nk,
type="l",
pch =16,
cex = 0.7,
col="black",
xlab="X",
ylab="Y",
xlim=c(-12, 12),
ylim=c(-0.4, 1.2))
lines(X, y, lwd = 3, col = "red")
jpeg("Sinc NK Predictions.jpg", width=800, height=600)
plot(X, pred_nk,
type="l",
pch =16,
cex = 0.7,
col="black",
xlab="X",
ylab="Y",
xlim=c(-12, 12),
ylim=c(-0.4, 1.2))
lines(X, y, lwd = 3, col = "red")
dev.off()
results <- RVM(X, t, mode, kernel_type, maxIts)
vectors <- results$vectors
weights <- results$weights
bias <- results$bias
PHI	= Kernel(X, X, kernel_type)
y_rvm	= PHI[, vectors] %*% weights + bias;
rvm_sinc_err <- MSE(y_rvm, y)
print(paste0("RVM (", kernel_type, " kernel) regression report: mean square error ", rvm_sinc_err, ", with ", length(vectors), " relevance vectors" ))
plot(X, y_rvm,
type= "l",
col="black",
xlab="X",
ylab="Y",
xlim=c(-12, 12),
ylim=c(-0.4, 1.2))
lines(X, y, col="red", lwd = 3)
points(X[vectors], y[vectors], col="turquoise", pch=16, cex = 1.2)
points(X[vectors], y[vectors], col="turquoise", pch=16, cex = 1.6)
jpeg("Sinc RVM Predictions.jpg", width=800, height=600)
plot(X, y_rvm,
type= "l",
col="black",
xlab="X",
ylab="Y",
xlim=c(-12, 12),
ylim=c(-0.4, 1.2))
lines(X, y, col="red", lwd = 3)
points(X[vectors], y[vectors], col="turquoise", pch=16, cex = 1.6)
dev.off()
N = 100
kernel_type = "radial"
maxIts = 1000
mode = "CLASSIFICATION"
dataset <- generateCrescentMoon(n = N, d = 2)
X <- cbind(dataset$X1, dataset$X2)
t <- as.numeric(dataset$Class) - 1
col.list <- c("red", "blue")
palette(col.list)
#jpeg("Half Moon Plot.jpg", width=800, height=600)
plot(X[,1], X[,2],
type="p",
col=dataset$Class,
pch =16,
cex = 0.7,
xlab="X",
ylab="Y",
xlim=c(-10, 10),
ylim=c(-10, 10))
jpeg("Half Moon Plot.jpg", width=800, height=600)
plot(X[,1], X[,2],
type="p",
col=dataset$Class,
pch =16,
cex = 0.7,
xlab="X",
ylab="Y",
xlim=c(-10, 10),
ylim=c(-10, 10))
dev.off()
svmdata <- cbind(X, as.logical(t))
model <- ksvm(x=X, y=t, kernel="rbfdot", type="C-svc")
pred <- predict(model, X)
#jpeg("SVM Half Moon Plot.jpg", width=800, height=600)
plot(model, data=X)
jpeg("SVM Half Moon Plot.jpg", width=800, height=600)
plot(model, data=X)
dev.off()
svm_moons_f1 <- F1_Score(t, pred)
svm_moons_precision <- Precision(pred, t)
svm_moons_recall <- Recall(t, pred)
cat(
paste0("SVM (", kernel_type, " kernel) classification report:
precision ", svm_moons_precision, ",
recall ", svm_moons_recall, ",
f1-score ", svm_moons_f1, ",
with ", model@nSV, " support vectors" ))
non_kernl <- bayesglm(t~ ., data=as.data.frame(svmdata))
pred_nk <- predict(non_kernl)
class_nk <- as.matrix(round(pred_nk))
#jpeg("NK Half Moon Plot.jpg", width=800, height=600)
plot(X[,1], X[,2],
type="p",
col=class_nk+1,
pch =16,
cex = 0.7,
xlab="X",
ylab="Y",
xlim=c(-10, 10),
ylim=c(-10, 10))
jpeg("NK Half Moon Plot.jpg", width=800, height=600)
plot(X[,1], X[,2],
type="p",
col=class_nk+1,
pch =16,
cex = 0.7,
xlab="X",
ylab="Y",
xlim=c(-10, 10),
ylim=c(-10, 10))
dev.off()
nk_moons_f1 <- F1_Score(t, class_nk)
nk_moons_precision <- Precision(class_nk, t)
nk_moons_recall <- Recall(t, class_nk)
cat(
paste0("NK classification report:
precision ", nk_moons_precision, ",
recall ", nk_moons_recall, ",
f1-score ", nk_moons_f1))
cat(
paste0("SVM (", kernel_type, " kernel) classification report:
precision ", svm_moons_precision, ",
recall ", svm_moons_recall, ",
f1-score ", svm_moons_f1, ",
with ", model@nSV, " support vectors" ))
results <- RVM(X, t, mode, kernel_type, maxIts)
vectors <- results$vectors
weights <- results$weights
bias <- results$bias
PHI	= Kernel(X, X, kernel_type)
y_moons_rvm	= PHI[, vectors] %*% weights + bias;
p_rvm <- sigmoid(y_moons_rvm)
class <- round(p_rvm) + 1
rvm_moons_f1 <- F1_Score(t, class-1)
rvm_moons_precision <- Precision(class-1, t)
rvm_moons_recall <- Recall(t, class-1)
cat(
paste0("RVM (", kernel_type, " kernel) classification report:
precision ", rvm_moons_precision, ",
recall ", rvm_moons_recall, ",
f1-score ", rvm_moons_f1, ",
with ", length(vectors), " relevance vectors" ))
# Setting up a grid to generate a contour plot
X_grid <- seq(-10, 10, 2)
Y_grid <- seq(-10, 10, 2)
grid <- as.matrix(expand.grid(X_grid, Y_grid))
PHI_grid <- Kernel(as.matrix(grid), X[vectors,], kernel_type)
y_grid <- PHI_grid %*% weights + bias
p_grid <- sigmoid(y_grid)
c_grid <- round(p_grid) + 1
p_grid_2d <- t(matrix(unlist(p_grid), nrow=11, ncol=11))
# Split classes to aid plotting
XwCol <- cbind(X, class-1)
XwCol <- XwCol[-vectors,]
class1 <- XwCol[XwCol[,3]==1,]
class0 <- XwCol[XwCol[,3]==0,]
RVM_contour <- plot_ly(x = X_grid, y = Y_grid) %>%
add_contour(
x = as.vector(X_grid),
y = as.vector(Y_grid),
z = p_grid_2d,
type="contour",
colorscale = 'RdBu',
reversescale=T,
contours = list(
start=0.0,
end=1.0,
size=0.25
)
) %>%
add_markers(
data=X,
x= class0[,1],
y= class0[,2],
type="scatter",
mode="markers",
size=0,
color= I("red")
) %>%
add_markers(
data=X,
x= class1[,1],
y= class1[,2],
type="scatter",
mode="markers",
size=0,
color=I("blue")
) %>%
add_markers(
data=X,
x= X[vectors,1],
y= X[vectors,2],
type="scatter",
mode="markers",
size=1,
color=I("cyan"),
) %>%
hide_colorbar() %>%
hide_legend()
RVM_contour
jpeg("NK Half Moon Plot.jpg", width=650, height=610)
plot(X[,1], X[,2],
type="p",
col=class_nk+1,
pch =16,
cex = 0.7,
xlab="X",
ylab="Y",
xlim=c(-10, 10),
ylim=c(-10, 10))
dev.off()
jpeg("SVM Half Moon Plot.jpg", width=650, height=610)
plot(model, data=X)
dev.off()
jpeg("Half Moon Plot.jpg", width=650, height=610)
plot(X[,1], X[,2],
type="p",
col=dataset$Class,
pch =16,
cex = 0.7,
xlab="X",
ylab="Y",
xlim=c(-10, 10),
ylim=c(-10, 10))
dev.off()
N = 100
noise	= 0.1
kernel_type = "radial"
width	= 3
maxIts = 1200
mode = "REGRESSION"
X <- as.matrix(seq(-10,10,length.out = 100))
y	= sin(abs(X))/abs(X)
t = y + noise*rnorm(N, mean=0)
plot(X, t,
type="p",
pch =16,
cex = 0.7,
col="black",
xlab="X",
ylab="Y",
xlim=c(-12, 12),
ylim=c(-0.4, 1.2))
lines(X, y, lwd = 3, col = "red")
jpeg("Sinc Noisy Plot.jpg", width=800, height=600)
plot(X, t,
type="p",
pch =16,
cex = 0.7,
col="black",
xlab="X",
ylab="Y",
xlim=c(-12, 12),
ylim=c(-0.4, 1.2))
lines(X, y, lwd = 3, col = "red")
dev.off()
svmdata <- cbind(X, t)
model <- ksvm(x=X, y=t, kernel="rbfdot")
summary(model)
pred <- predict(model, X)
SVs <- cbind(X[model@SVindex], t[model@SVindex])
plot(X, pred,
type="l",
pch =16,
cex = 0.7,
col="black",
xlab="X",
ylab="Y",
xlim=c(-12, 12),
ylim=c(-0.4, 1.2))
lines(X, y, lwd=3, col= "red")
points(SVs[,1],
SVs[,2],
col = "turquoise",
pch=16,
cex=0.7)
jpeg("Sinc SVM Predictions.jpg", width=800, height=600)
plot(X, pred,
type="l",
pch =16,
cex = 0.7,
col="black",
xlab="X",
ylab="Y",
xlim=c(-12, 12),
ylim=c(-0.4, 1.2))
lines(X, y, lwd=3, col= "red")
points(SVs[,1],
SVs[,2],
col = "turquoise",
pch=16,
cex=0.7)
dev.off()
non_kernl <- bayesglm(t~ ., data=as.data.frame(svmdata))
pred_nk <- predict(non_kernl)
nk_sinc_err <- MSE(pred_nk, y)
print(paste0("NK regression report: mean square error ", nk_sinc_err))
plot(X, pred_nk,
type="l",
pch =16,
cex = 0.7,
col="black",
xlab="X",
ylab="Y",
xlim=c(-12, 12),
ylim=c(-0.4, 1.2))
lines(X, y, lwd = 3, col = "red")
jpeg("Sinc NK Predictions.jpg", width=800, height=600)
plot(X, pred_nk,
type="l",
pch =16,
cex = 0.7,
col="black",
xlab="X",
ylab="Y",
xlim=c(-12, 12),
ylim=c(-0.4, 1.2))
lines(X, y, lwd = 3, col = "red")
dev.off()
print(paste0("NK regression report: mean square error ", nk_sinc_err))
print(paste0("SVM (", kernel_type, " kernel) regression report: mean square error ", svm_sinc_err, ", with ", model@nSV, " support vectors" ))
svm_sinc_err <- MSE(pred, y)
nSV <- model@nSV
print(paste0("SVM (", kernel_type, " kernel) regression report: mean square error ", svm_sinc_err, ", with ", model@nSV, " support vectors" ))
svmdata <- cbind(X, t)
model <- ksvm(x=X, y=t, kernel="rbfdot")
summary(model)
pred <- predict(model, X)
pred <- predict(model, X)
SVs <- cbind(X[model@SVindex], t[model@SVindex])
svm_sinc_err <- MSE(pred, y)
nSV <- model@nSV
print(paste0("SVM (", kernel_type, " kernel) regression report: mean square error ", svm_sinc_err, ", with ", model@nSV, " support vectors" ))
non_kernl <- bayesglm(t~ ., data=as.data.frame(svmdata))
pred_nk <- predict(non_kernl)
nk_sinc_err <- MSE(pred_nk, y)
print(paste0("NK regression report: mean square error ", nk_sinc_err))
results <- RVM(X, t, mode, kernel_type, maxIts)
vectors <- results$vectors
weights <- results$weights
bias <- results$bias
PHI	= Kernel(X, X, kernel_type)
y_rvm	= PHI[, vectors] %*% weights + bias;
rvm_sinc_err <- MSE(y_rvm, y)
print(paste0("RVM (", kernel_type, " kernel) regression report: mean square error ", rvm_sinc_err, ", with ", length(vectors), " relevance vectors" ))
plot(X, y_rvm,
type= "l",
col="black",
xlab="X",
ylab="Y",
xlim=c(-12, 12),
ylim=c(-0.4, 1.2))
lines(X, y, col="red", lwd = 3)
points(X[vectors], t[vectors], col="turquoise", pch=16, cex = 1.6)
jpeg("Sinc RVM Predictions.jpg", width=800, height=600)
plot(X, y_rvm,
type= "l",
col="black",
xlab="X",
ylab="Y",
xlim=c(-12, 12),
ylim=c(-0.4, 1.2))
lines(X, y, col="red", lwd = 3)
points(X[vectors], t[vectors], col="turquoise", pch=16, cex = 1.6)
dev.off()
plot(X, pred_nk,
type="l",
pch =16,
cex = 0.7,
col="black",
xlab="X",
ylab="Y",
xlim=c(-12, 12),
ylim=c(-0.4, 1.2))
lines(X, y, lwd = 3, col = "red")
jpeg("Sinc NK Predictions.jpg", width=800, height=600)
plot(X, pred_nk,
type="l",
pch =16,
cex = 0.7,
col="black",
xlab="X",
ylab="Y",
xlim=c(-12, 12),
ylim=c(-0.4, 1.2))
lines(X, y, lwd = 3, col = "red")
dev.off()
plot(X, pred,
type="l",
pch =16,
cex = 0.7,
col="black",
xlab="X",
ylab="Y",
xlim=c(-12, 12),
ylim=c(-0.4, 1.2))
lines(X, y, lwd=3, col= "red")
points(SVs[,1],
SVs[,2],
col = "turquoise",
pch=16,
cex=0.7)
jpeg("Sinc SVM Predictions.jpg", width=800, height=600)
plot(X, pred,
type="l",
pch =16,
cex = 0.7,
col="black",
xlab="X",
ylab="Y",
xlim=c(-12, 12),
ylim=c(-0.4, 1.2))
lines(X, y, lwd=3, col= "red")
points(SVs[,1],
SVs[,2],
col = "turquoise",
pch=16,
cex=0.7)
dev.off()
plot(X, t,
type="p",
pch =16,
cex = 0.7,
col="black",
xlab="X",
ylab="Y",
xlim=c(-12, 12),
ylim=c(-0.4, 1.2))
lines(X, y, lwd = 3, col = "red")
jpeg("Sinc Noisy Plot.jpg", width=800, height=600)
plot(X, t,
type="p",
pch =16,
cex = 0.7,
col="black",
xlab="X",
ylab="Y",
xlim=c(-12, 12),
ylim=c(-0.4, 1.2))
lines(X, y, lwd = 3, col = "red")
dev.off()
